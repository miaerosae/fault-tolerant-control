import numpy as np

import fym
from fym.core import BaseEnv, BaseSystem
from fym.utils.rot import dcm2quat, quat2dcm, angle2quat, quat2angle

import ftc.config


cfg = ftc.config.load(__name__)


class Mixer:
    """Definition:
        Mixer takes force commands and translate them to actuator commands.
        Actuator commands here mean the force generated by each rotor.
    """
    def __init__(self, d, c, b):
        rtype = cfg.mixer.rtype

        if rtype == "quad":
            B = np.array(
                [[1, 1, 1, 1],
                 [0, -d, 0, d],
                 [d, 0, -d, 0],
                 [-c, c, -c, c]]
            )

        elif rtype == "hexa-x":
            b = 1
            B = np.array(
                [[b, b, b, b, b, b],
                 [-b*d, b*d, b*d/2, -b*d/2, -b*d/2, b*d/2],
                 [0, 0, b*d*np.sqrt(3)/2, -b*d*np.sqrt(3)/2, b*d*np.sqrt(3)/2,
                  -b*d*np.sqrt(3)/2],
                 [-c, c, -c, c, c, -c]]
            )

        elif rtype == "hexa-+":
            b = 1
            B = np.array(
                [[b, b, b, b, b, b],
                 [0, 0, b*d*np.sqrt(3)/2, -b*d*np.sqrt(3)/2, b*d*np.sqrt(3)/2,
                  -b*d*np.sqrt(3)/2],
                 [-b*d, b*d, b*d/2, -b*d/2, -b*d/2, b*d/2],
                 [-c, c, -c, c, c, -c]]
            )
            self.b_gyro = np.vstack((1, -1, 1, -1, 1, -1))

            s2 = 1/2
            s3 = np.sqrt(3)/2
            self.d_rotor = np.array([
                [d, 0, 0],
                [d*s2, -d*s3, 0],
                [-d*s2, -d*s3, 0],
                [-d, 0, 0],
                [-d*s2, d*s3, 0],
                [d*s2, d*s3, 0],
            ])

        elif rtype == "hexa-falconi":
            B = np.array(
                [[b, b, b, b, b, b],
                 [0.5*d*b, d*b, 0.5*d*b, -0.5*d*b, -d*b, -0.5*d*b],
                 [0.5*np.sqrt(3)*d*b, 0, -0.5*np.sqrt(3)*d*b,
                  -0.5*np.sqrt(3)*d*b, 0, 0.5*np.sqrt(3)*d*b],
                 [c, -c, c, -c, c, -c]]
            )

        else:
            B = np.eye(4)

        self.b = b
        self.B = B
        self.Binv = np.linalg.pinv(B)

    def inverse(self, rotors):
        return self.B.dot(rotors)

    def __call__(self, forces):
        return self.Binv.dot(forces)


class Multicopter(BaseEnv):
    """Multicopter Model
    Variables:
        pos: position in I-coord
        vel: velocity in I-coord
        quat: unit quaternion.
            Corresponding to the rotation matrix from I- to B-coord.

    Drag model [1]:
        self.M_gyroscopic
        self.A_drag
        self.B_drag
        self.D_drag
        - Note: orientation `R` in the paper is `dcm.T`

    References:
        [1] M. Faessler, A. Franchi, and D. Scaramuzza, “Differential Flatness of Quadrotor Dynamics Subject to Rotor Drag for Accurate Tracking of High-Speed Trajectories,” IEEE Robot. Autom. Lett., vol. 3, no. 2, pp. 620–626, Apr. 2018, doi: 10.1109/LRA.2017.2776353.
    """
    def __init__(self, pos, vel, quat, omega,
                 dx=0.0, dy=0.0, dz=0.0, uncertainty=0, blade=False):
        super().__init__()
        self.pos = BaseSystem(pos)
        self.vel = BaseSystem(vel)
        self.quat = BaseSystem(quat)
        self.omega = BaseSystem(omega)

        fym.parser.update(cfg.physProp,
                          fym.parser.decode(cfg.physPropBy)[cfg.modelFrom])
        for k, v in fym.parser.decode(cfg.physProp).items():
            self.__setattr__(k, v)

        self.J = (1 - uncertainty) * self.J

        self.Jinv = np.linalg.inv(self.J)
        self.M_gyroscopic = np.zeros((3, 1))
        self.A_drag = np.diag(np.zeros(3))  # currently ignored
        self.B_drag = np.diag(np.zeros(3))  # currently ignored
        self.D_drag = np.diag([dx, dy, dz])
        self.mixer = Mixer(d=self.d, c=self.c, b=self.b)

        self.blade = blade

    def deriv(self, t, pos, vel, quat, omega, rotors, windvel):
        if self.blade is False:
            F, M1, M2, M3 = self.mixer.inverse(rotors)
            M = np.vstack((M1, M2, M3))
        else:
            F, M = self.get_FM_wind(rotors, vel, omega, windvel)

        m, g, J = self.m, self.g, self.J
        e3 = np.vstack((0, 0, 1))

        # wind: vel = vel - windvel
        dpos = vel  # + 0.5*np.sin(t)
        dcm = quat2dcm(quat)
        dvel = (g*e3 - F*dcm.T.dot(e3)/m
                - dcm.T.dot(self.D_drag).dot(dcm).dot(vel)
                # + 1*np.sin(t)
                )
        # wind: 바람 추가
        # DCM integration (Note: dcm; I to B) [1]
        p, q, r = np.ravel(omega)
        # unit quaternion integration [4]
        dquat = 0.5 * np.array([[0., -p, -q, -r],
                                [p, 0., r, -q],
                                [q, -r, 0., p],
                                [r, q, -p, 0.]]).dot(quat)
        eps = 1 - (quat[0]**2+quat[1]**2+quat[2]**2+quat[3]**2)
        k = 1
        dquat = dquat + k*eps*quat
        domega = self.Jinv.dot(
            M
            - np.cross(omega, J.dot(omega), axis=0)
            - self.M_gyroscopic
            - self.A_drag.dot(dcm).dot(vel)
            - self.B_drag.dot(omega)
            + windvel
        )

        return dpos, dvel, dquat, domega

    def set_dot(self, t, rotors, windvel=np.zeros((3, 1))):
        states = self.observe_list()
        dots = self.deriv(t, *states, rotors, windvel)
        self.pos.dot, self.vel.dot, self.quat.dot, self.omega.dot = dots

    def get_d(self, W, rotors):
        rotor_n = rotors.shape[0]
        fault = W - np.eye(rotor_n)
        return self.mixer.B.dot(fault.dot(rotors))

    def get_Omega(self, f):
        f = np.clip(f, 0, self.rotor_max)
        Omega = self.mixer.b_gyro.T.dot(np.sqrt(f / self.mixer.b))
        return Omega

    def get_FM_wind(self, f, vel, omega, windvel):
        relvel = windvel - vel

        f = np.clip(f, 0, self.rotor_max)

        # Frame drag
        F_drag = 1/2 * self.rho * self.CdA * np.linalg.norm(relvel) * relvel

        # Blade Flapping
        F_blade = np.zeros((3, 1))
        M_blade = np.zeros((3, 1))
        for fi, di in zip(f, self.mixer.d_rotor):
            di = di[:, None]
            if fi != 0:
                Omegai = np.sqrt(fi / self.mixer.b)
                vr = relvel + np.cross(omega, di, axis=0)
                mur = np.linalg.norm(vr[:2]) / (Omegai * self.R)
                psir = np.arctan2(vr[1, 0], vr[0, 0])
                lambdah = np.sqrt(self.CT / 2)
                gamma = self.rho * self.a0 * self.ch * self.R**4 / self.Jr
                v1s = 1 / (1 + mur**2 / 2) * 4 / 3 * (
                    self.CT / self.sigma * 2 / 3 * mur * gamma / self.a0 + mur)
                u1s = 1 / (1 - mur**2 / 2) * mur * (
                    4 * self.thetat - 2 * lambdah**2)
                alpha1s, beta1s = np.array([
                    [np.cos(psir), -np.sin(psir)],
                    [np.sin(psir), np.cos(psir)]
                ]).dot(np.vstack((u1s, v1s)))

                ab = np.vstack((
                    -np.sin(alpha1s),
                    -np.cos(alpha1s) * np.sin(beta1s),
                    np.cos(alpha1s) * np.cos(beta1s) - 1))

                F_blade += self.mixer.b * Omegai**2 * ab
                M_blade += np.cross(di, self.mixer.b * Omegai**2 * ab, axis=0)

        F_wind = F_blade + F_drag
        M_wind = M_blade

        return F_wind, M_wind


if __name__ == "__main__":
    system = Multicopter()
    system.set_dot(t=0, rotors=np.zeros((6, 1)))
    print(repr(system))
